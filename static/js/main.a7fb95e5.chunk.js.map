{"version":3,"sources":["home.js","login.js","update.js","result.js","components/navbar.js","serviceWorker.js","index.js"],"names":["Home","className","React","Component","Login","props","handleCheckChange","event","target","newObj","state","mcChoices","name","checked","setState","handleTextChange","shortResponse","value","handleSubmit","fetch","method","headers","body","JSON","stringify","then","response","json","data","console","log","catch","error","submitted","mcQuestion","shortQuestion","this","to","checkboxes","Object","keys","map","choice","Fragment","id","type","onChange","for","onSubmit","Update","Result","msg","Navbar","href","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.a7fb95e5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Home extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Home\">\r\n        <header className=\"home-header\">\r\n          <h1>\r\n            welcome to social cybersecurity!\r\n          </h1>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router';\r\n\r\nclass Login extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      name: \"\",\r\n      mcQuestion: \"\",\r\n      mcChoices: {},\r\n      shortQuestion: \"\",\r\n      shortResponse: \"\",\r\n      submitted: false\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('/login_data')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({name: data['name'],\r\n\t\t\t\t\t\t\t\t   mcQuestion: data['mcQuestion'],\r\n\t\t\t\t\t\t\t\t   mcChoices: data['mcChoices'],\r\n\t\t\t\t\t\t\t\t   shortQuestion: data['shortQuestion']}));\r\n  }\r\n\r\n  handleCheckChange = event => {\r\n    const target = event.target;\r\n    const newObj = {...this.state.mcChoices, [target.name]: target.checked}\r\n    this.setState({mcChoices: newObj});\r\n  }\r\n\r\n  handleTextChange = event => {\r\n    this.setState({shortResponse: event.target.value});\r\n  }\r\n\r\n  handleSubmit = event => {\r\n  \tfetch('/login_data', {\r\n  \t\tmethod: 'POST',\r\n  \t\theaders: {\r\n  \t\t\t'Content-Type': 'application/json',\r\n  \t\t},\r\n  \t\tbody: JSON.stringify(this.state),\r\n  \t})\r\n  \t.then(response => response.json())\r\n  \t.then(data => {console.log('Success:', data);})\r\n  \t.catch((error) => {console.error('Error:', error);});\r\n  \tthis.setState({submitted: true});\r\n  }\r\n\r\n  render() {\r\n  \tif (this.state.submitted) {\r\n  \t\treturn (<Redirect to='/socialcybersecurity/result' />);\r\n  \t}\r\n  \t\r\n  \tconst checkboxes = Object.keys(this.state.mcChoices).map(choice =>\r\n  \t\t(<React.Fragment>\r\n  \t\t\t<input name={choice} id={choice} type=\"checkbox\" onChange={this.handleCheckChange} />\r\n  \t\t\t<label for={choice}> {choice} </label> <br/>\r\n  \t\t</React.Fragment>));\r\n\r\n    return (\r\n      <div className=\"Login\">\r\n        <header className=\"login-header\">\r\n          <h3>\r\n            hello, {this.state.name}!\r\n          </h3>\r\n          <form onSubmit={this.handleSubmit}>\r\n\t\t\t<p>{this.state.mcQuestion}</p>\r\n\t\t\t{checkboxes}<br/>\r\n\r\n\t\t\t<label>{this.state.shortQuestion}</label><br/>\r\n\t\t\t<input\r\n\t\t\t  name=\"short\"\r\n\t\t\t  type=\"text\"\r\n\t\t\t  value={this.state.shortResponse}\r\n\t\t\t  onChange={this.handleTextChange} /><br/><br/>\r\n\t\t\t<input type=\"submit\" value=\"Submit\" />\r\n\t\t  </form>\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\n\r\nclass Update extends React.Component {\r\n  render() {\r\n\treturn (\r\n\t  <div className=\"Update\">\r\n\t    <header className=\"update-header\">\r\n\t      <h1>\r\n\t        update form\r\n\t      </h1>\r\n\t    </header>\r\n\t  </div>\r\n\t);\r\n  }\r\n}\r\n\r\nexport default Update;\r\n","import React from 'react';\r\n\r\nclass Result extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      msg: \"error: no message\"\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch('/result')\r\n      .then(response => response.json())\r\n      .then(data => this.setState({msg: data['msg']}));\r\n  }\r\n\r\n  render() {\r\n\treturn (\r\n\t  <div className=\"Result\">\r\n\t    <header className=\"result-header\">\r\n\t      <h1>\r\n\t        {this.state.msg}\r\n\t      </h1>\r\n\t    </header>\r\n\t  </div>\r\n\t);\r\n  }\r\n}\r\n\r\nexport default Result;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Home from './../home';\r\nimport Login from './../login';\r\nimport Update from './../update';\r\nimport Result from './../result'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nclass Navbar extends React.Component {\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <div>\r\n          <nav>\r\n            <h3><a href=\"/\">Home</a></h3>\r\n            <ul>\r\n              <li>\r\n                <Link to=\"/socialcybersecurity\">Social Cybersecurity Home</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/socialcybersecurity/login\">Login</Link>\r\n              </li>\r\n              <li>\r\n                <Link to=\"/socialcybersecurity/update\">Update Notes</Link>\r\n              </li>\r\n            </ul>\r\n          </nav>\r\n          <Switch>\r\n            <Route path=\"/socialcybersecurity/login\">\r\n              <Login />\r\n            </Route>\r\n            <Route path=\"/socialcybersecurity/update\">\r\n              <Update />\r\n            </Route>\r\n            <Route path=\"/socialcybersecurity/result\">\r\n              <Result />\r\n            </Route>\r\n            <Route path=\"/socialcybersecurity\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Navbar;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Navbar from './components/navbar';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Navbar />,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}